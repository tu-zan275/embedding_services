# course_rag_pipeline.py
import os
from dotenv import load_dotenv
from pymilvus import connections, FieldSchema, CollectionSchema, DataType, Collection, utility
from sentence_transformers import SentenceTransformer
import uuid

load_dotenv()

# 1Ô∏è‚É£ K·∫øt n·ªëi Milvus
#connections.connect("default", host="localhost", port="19530")
connections.connect("default", host=os.getenv("MILVUS_HOST"), port=os.getenv("MILVUS_PORT"))

# 2Ô∏è‚É£ T·∫°o schema unified cho c·∫£ kh√≥a h·ªçc & b√†i h·ªçc
def create_course_rag_collection():
    collection_name = "course_rag"
    if utility.has_collection(collection_name):
        print("Collection ƒë√£ t·ªìn t·∫°i, skip t·∫°o.")
        collection = Collection(collection_name)
    else:
        fields = [
            FieldSchema(name="id", dtype=DataType.VARCHAR, is_primary=True, max_length=64),
            FieldSchema(name="embedding", dtype=DataType.FLOAT_VECTOR, dim=768),
            FieldSchema(name="type", dtype=DataType.VARCHAR, max_length=10),
            FieldSchema(name="course_id", dtype=DataType.VARCHAR, max_length=64),
            FieldSchema(name="course_title", dtype=DataType.VARCHAR, max_length=256),
            FieldSchema(name="lesson_id", dtype=DataType.VARCHAR, max_length=64),
            FieldSchema(name="lesson_title", dtype=DataType.VARCHAR, max_length=256),
            FieldSchema(name="author", dtype=DataType.VARCHAR, max_length=128),
            FieldSchema(name="category", dtype=DataType.VARCHAR, max_length=128),
            FieldSchema(name="content", dtype=DataType.VARCHAR, max_length=65535),
            FieldSchema(name="url", dtype=DataType.VARCHAR, max_length=512),
        ]
        schema = CollectionSchema(fields, description="Unified RAG schema for courses and lessons")
        collection = Collection(name=collection_name, schema=schema)

        index_params = {"index_type": "IVF_FLAT", "metric_type": "IP", "params": {"nlist": 128}}
        collection.create_index(field_name="embedding", index_params=index_params)
        print("‚úÖ Collection created:", collection_name)

    # üî• Load collection v√†o RAM ƒë·ªÉ c√≥ th·ªÉ search
    try:
        collection.load()
        print("‚úÖ Collection loaded v√†o RAM.")
    except Exception as e:
        print("‚ö†Ô∏è Load collection th·∫•t b·∫°i:", e)

    return collection

#embed_query = SentenceTransformer("intfloat/multilingual-e5-small")  # d√πng cho truy v·∫•n
#embed_corpus = SentenceTransformer("intfloat/multilingual-e5-base")  # d√πng cho indexing n·ªôi dung

# 3Ô∏è‚É£ Sinh embedding model (Vi·ªát h√≥a ho·∫∑c ƒëa ng√¥n ng·ªØ)
embed_model = SentenceTransformer("intfloat/multilingual-e5-base")

def embed_text(text):
    return embed_model.encode(text).tolist()

# 4Ô∏è‚É£ Chu·∫©n b·ªã d·ªØ li·ªáu m·∫´u
courses = [
    {
        "course_id": "C001",
        "title": "Kh√≥a h·ªçc SEO n√¢ng cao",
        "author": "Nguy·ªÖn Minh",
        "category": "Marketing",
        "description": "Kh√≥a h·ªçc gi√∫p b·∫°n t·ªëi ∆∞u SEO website, nghi√™n c·ª©u t·ª´ kh√≥a v√† x√¢y d·ª±ng n·ªôi dung ch·∫•t l∆∞·ª£ng.",
        "url": "https://example.com/seo-nang-cao",
        "lessons": [
            {"lesson_id": "L001", "title": "Nghi√™n c·ª©u t·ª´ kh√≥a", "content": "C√°ch ph√¢n t√≠ch v√† ch·ªçn t·ª´ kh√≥a ph√π h·ª£p."},
            {"lesson_id": "L002", "title": "T·ªëi ∆∞u Onpage", "content": "K·ªπ thu·∫≠t t·ªëi ∆∞u ti√™u ƒë·ªÅ, meta v√† heading."},
            {"lesson_id": "L003", "title": "X√¢y d·ª±ng backlink", "content": "Ph∆∞∆°ng ph√°p t·∫°o li√™n k·∫øt ch·∫•t l∆∞·ª£ng cao."}
        ]
    },
    {
        "course_id": "C002",
        "title": "Kh√≥a h·ªçc L·∫≠p tr√¨nh Python c∆° b·∫£n",
        "author": "Tr·∫ßn Huy",
        "category": "L·∫≠p tr√¨nh",
        "description": "H·ªçc Python t·ª´ cƒÉn b·∫£n ƒë·∫øn n√¢ng cao, qua v√≠ d·ª• th·ª±c t·∫ø v√† b√†i t·∫≠p ·ª©ng d·ª•ng.",
        "url": "https://example.com/python-co-ban",
        "lessons": [
            {"lesson_id": "L004", "title": "Gi·ªõi thi·ªáu Python", "content": "L·ªãch s·ª≠ v√† ·ª©ng d·ª•ng th·ª±c t·∫ø c·ªßa Python."},
            {"lesson_id": "L005", "title": "Bi·∫øn v√† ki·ªÉu d·ªØ li·ªáu", "content": "C√°ch khai b√°o v√† s·ª≠ d·ª•ng bi·∫øn trong Python."}
        ]
    }
]


# 5Ô∏è‚É£ Chuy·ªÉn d·ªØ li·ªáu th√†nh c√°c b·∫£n ghi embedding
def prepare_records(courses):
    records = []
    for course in courses:
        # Kh√≥a h·ªçc
        course_text = f"Kh√≥a h·ªçc: {course['title']}. T√°c gi·∫£: {course['author']}. Danh m·ª•c: {course['category']}. N·ªôi dung: {course['description']}"
        records.append({
            "id": str(uuid.uuid4()),
            "embedding": embed_text(course_text),
            "type": "course",
            "course_id": course["course_id"],
            "course_title": course["title"],
            "lesson_id": "",
            "lesson_title": "",
            "author": course["author"],
            "category": course["category"],
            "content": course["description"],
            "url": course["url"]
        })

        # C√°c b√†i h·ªçc
        for lesson in course["lessons"]:
            lesson_text = f"B√†i h·ªçc: {lesson['title']}. Thu·ªôc kh√≥a h·ªçc: {course['title']}. T√°c gi·∫£: {course['author']}. N·ªôi dung: {lesson['content']}"
            records.append({
                "id": str(uuid.uuid4()),
                "embedding": embed_text(lesson_text),
                "type": "lesson",
                "course_id": course["course_id"],
                "course_title": course["title"],
                "lesson_id": lesson["lesson_id"],
                "lesson_title": lesson["title"],
                "author": course["author"],
                "category": course["category"],
                "content": lesson["content"],
                "url": course["url"]
            })
    return records


# 6Ô∏è‚É£ Insert v√†o Milvus
def insert_data(collection, records):
    data = [
        [r["id"] for r in records],
        [r["embedding"] for r in records],
        [r["type"] for r in records],
        [r["course_id"] for r in records],
        [r["course_title"] for r in records],
        [r["lesson_id"] for r in records],
        [r["lesson_title"] for r in records],
        [r["author"] for r in records],
        [r["category"] for r in records],
        [r["content"] for r in records],
        [r["url"] for r in records],
    ]
    collection.insert(data)
    collection.flush()
    print(f"‚úÖ ƒê√£ insert {len(records)} records v√†o Milvus")


# =====================
# QUERY RAG ‚Äî optimized
# =====================
def query_rag_v1(collection, query, filter_expr=None, limit=5):
    """
    T√¨m ki·∫øm ng·ªØ nghƒ©a (semantic search) tr√™n Milvus.
    Tr·∫£ v·ªÅ danh s√°ch dict d·ªÖ d√πng cho API.
    """
    q_emb = embed_text(query)

    results = collection.search(
        data=[q_emb],
        anns_field="embedding",
        param={"metric_type": "IP", "params": {"nprobe": 8}},
        limit=limit,
        expr=filter_expr,
        output_fields=["type", "course_title", "lesson_title", "author", "url", "content"]
    )

    hits = []
    print(f"\nüîç Query: {query}\n")
    for hit in results[0]:
        item = {
            "score": hit.score,
            "type": hit.entity.get("type"),
            "course_title": hit.entity.get("course_title"),
            "lesson_title": hit.entity.get("lesson_title"),
            "author": hit.entity.get("author"),
            "url": hit.entity.get("url"),
            "content": hit.entity.get("content"),
        }
        hits.append(item)

        # Log ng·∫Øn g·ªçn
        print(f"[{item['type'].upper()}] {item['course_title']} ‚Üí {item['lesson_title']}")
        print(f"T√°c gi·∫£: {item['author']} | URL: {item['url']}")
        print(f"N·ªôi dung: {item['content'][:100]}...\n")

    print(f"‚úÖ T·ªïng s·ªë k·∫øt qu·∫£: {len(hits)}\n")
    return hits


def query_rag(collection, query, filter_expr=None, limit=5, input_search_type):
    """
    Truy v·∫•n semantic search tr√™n Milvus.
    - N·∫øu query mang t√≠nh t·ªïng quan -> t√¨m 'course'
    - N·∫øu query mang t√≠nh chi ti·∫øt v·ªÅ b√†i h·ªçc -> t√¨m 'lesson'
    """

    query_lower = query.lower()

    lesson_keywords = ["b√†i h·ªçc", "lesson", "ch∆∞∆°ng", "ph·∫ßn", "n·ªôi dung", "c√°ch h·ªçc", "h∆∞·ªõng d·∫´n", "v√≠ d·ª•"]

    # if any(k in query_lower for k in lesson_keywords):
    #     search_type = "lesson"
    # else:
    #     search_type = "course"

    search_type = input_search_type

    q_emb = embed_text(query)

    expr = f"type == '{search_type}'"
    if filter_expr:
        expr += f" and {filter_expr}"

    results = collection.search(
        data=[q_emb],
        anns_field="embedding",
        param={"metric_type": "IP", "params": {"nprobe": 8}},
        limit=limit,
        expr=expr,
        output_fields=[
            "type", "course_title", "lesson_title",
            "author", "category", "url", "content"
        ]
    )

    hits = []
    print(f"\nüîç Query: {query}  ‚Üí  T√¨m trong: {search_type.upper()}\n")

    for hit in results[0]:
        entity = hit.entity
        item = {
            "score": round(hit.score, 4),
            "type": entity.get("type"),
            "course_title": entity.get("course_title"),
            "lesson_title": entity.get("lesson_title"),
            "author": entity.get("author"),
            "category": entity.get("category"),
            "url": entity.get("url"),
            "content": entity.get("content"),
        }
        hits.append(item)

        label = item["lesson_title"] if item["type"] == "lesson" else item["course_title"]
        print(f"[{item['type'].upper()}] {item['course_title']} ‚Üí {item['lesson_title'] or 'N/A'}")
        print(f"T√°c gi·∫£: {item['author']} | URL: {item['url']}")
        print(f"N·ªôi dung: {item['content'][:120]}...\n")

    print(f"‚úÖ T·ªïng k·∫øt qu·∫£: {len(hits)}\n")
    return hits


## V3
# import numpy as np

# # =====================================
# # üß© Hu·∫•n luy·ªán s∆° b·ªô h∆∞·ªõng c√¢u h·ªèi
# # =====================================
# course_examples = [
#     "Kh√≥a h·ªçc n√†y n√≥i v·ªÅ g√¨?",
#     "Ai l√† gi·∫£ng vi√™n c·ªßa kh√≥a h·ªçc?",
#     "T√¥i n√™n h·ªçc kh√≥a n√†o v·ªÅ Python?",
#     "Kh√≥a h·ªçc n√†o gi√∫p t√¥i n√¢ng cao k·ªπ nƒÉng l·∫≠p tr√¨nh?",
# ]

# lesson_examples = [
#     "B√†i h·ªçc ƒë·∫ßu ti√™n d·∫°y c√°i g√¨?",
#     "Trong ch∆∞∆°ng 2 c√≥ h∆∞·ªõng d·∫´n th·ª±c h√†nh kh√¥ng?",
#     "N·ªôi dung c·ªßa b√†i h·ªçc n√†y l√† g√¨?",
#     "B√†i 3 n√≥i v·ªÅ c√°ch c√†i ƒë·∫∑t ra sao?",
# ]

# course_query_vector = np.mean([embed_text(q) for q in course_examples], axis=0)
# lesson_query_vector = np.mean([embed_text(q) for q in lesson_examples], axis=0)


# # =====================================
# # üöÄ H√†m query ch√≠nh
# # =====================================
# def query_rag(collection, query, filter_expr=None, limit=5):
#     """
#     T√¨m ki·∫øm semantic RAG tr√™n Milvus, t·ª± nh·∫≠n di·ªán lo·∫°i c√¢u h·ªèi.
#     """
#     q_emb = embed_text(query)

#     # 1Ô∏è‚É£ Ph√¢n lo·∫°i c√¢u h·ªèi b·∫±ng cosine similarity
#     def cosine_sim(a, b):
#         return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))

#     sim_course = cosine_sim(q_emb, course_query_vector)
#     sim_lesson = cosine_sim(q_emb, lesson_query_vector)
#     search_type = "lesson" if sim_lesson > sim_course else "course"

#     # 2Ô∏è‚É£ Chu·∫©n b·ªã filter
#     expr = f"type == '{search_type}'"
#     if filter_expr:
#         expr += f" and {filter_expr}"

#     # 3Ô∏è‚É£ Truy v·∫•n Milvus
#     results = collection.search(
#         data=[q_emb],
#         anns_field="embedding",
#         param={"metric_type": "IP", "params": {"nprobe": 8}},
#         limit=limit,
#         expr=expr,
#         output_fields=[
#             "type", "course_title", "lesson_title",
#             "author", "category", "url", "content"
#         ]
#     )

#     # 4Ô∏è‚É£ K·∫øt qu·∫£
#     hits = []
#     print(f"\nüîç Query: {query}")
#     print(f"ü§ñ Ph√¢n lo·∫°i: {search_type.upper()} (sim_course={sim_course:.3f}, sim_lesson={sim_lesson:.3f})\n")

#     for hit in results[0]:
#         e = hit.entity
#         hits.append({
#             "score": round(hit.score, 4),
#             "type": e.get("type"),
#             "course_title": e.get("course_title"),
#             "lesson_title": e.get("lesson_title"),
#             "author": e.get("author"),
#             "category": e.get("category"),
#             "url": e.get("url"),
#             "content": e.get("content"),
#         })

#         # Log ng·∫Øn
#         print(f"[{e.get('type').upper()}] {e.get('course_title')} ‚Üí {e.get('lesson_title') or 'N/A'}")
#         print(f"URL: {e.get('url')}")
#         print(f"N·ªôi dung: {e.get('content')[:120]}...\n")

#     print(f"‚úÖ T·ªïng: {len(hits)} k·∫øt qu·∫£\n")
#     return hits
