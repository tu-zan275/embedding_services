# course_rag_pipeline.py
import os
from dotenv import load_dotenv
from pymilvus import connections, FieldSchema, CollectionSchema, DataType, Collection, utility
from sentence_transformers import SentenceTransformer
import uuid

load_dotenv()

# 1Ô∏è‚É£ K·∫øt n·ªëi Milvus
#connections.connect("default", host="localhost", port="19530")
connections.connect("default", host=os.getenv("MILVUS_HOST"), port=os.getenv("MILVUS_PORT"))

# 2Ô∏è‚É£ T·∫°o schema unified cho c·∫£ kh√≥a h·ªçc & b√†i h·ªçc
def create_course_rag_collection():
    collection_name = "course_rag"
    if utility.has_collection(collection_name):
        print("Collection ƒë√£ t·ªìn t·∫°i, skip t·∫°o.")
        return Collection(collection_name)

    fields = [
        FieldSchema(name="id", dtype=DataType.VARCHAR, is_primary=True, max_length=64),
        FieldSchema(name="embedding", dtype=DataType.FLOAT_VECTOR, dim=768),
        FieldSchema(name="type", dtype=DataType.VARCHAR, max_length=10),  # 'course' ho·∫∑c 'lesson'
        FieldSchema(name="course_id", dtype=DataType.VARCHAR, max_length=64),
        FieldSchema(name="course_title", dtype=DataType.VARCHAR, max_length=256),
        FieldSchema(name="lesson_id", dtype=DataType.VARCHAR, max_length=64),
        FieldSchema(name="lesson_title", dtype=DataType.VARCHAR, max_length=256),
        FieldSchema(name="author", dtype=DataType.VARCHAR, max_length=128),
        FieldSchema(name="category", dtype=DataType.VARCHAR, max_length=128),
        FieldSchema(name="content", dtype=DataType.VARCHAR, max_length=65535),
        FieldSchema(name="url", dtype=DataType.VARCHAR, max_length=512),
    ]
    schema = CollectionSchema(fields, description="Unified RAG schema for courses and lessons")
    collection = Collection(name=collection_name, schema=schema)

    # T·∫°o index vector ƒë·ªÉ search nhanh
    index_params = {"index_type": "IVF_FLAT", "metric_type": "IP", "params": {"nlist": 128}}
    collection.create_index(field_name="embedding", index_params=index_params)
    print("‚úÖ Collection created:", collection_name)
    return collection

#embed_query = SentenceTransformer("intfloat/multilingual-e5-small")  # d√πng cho truy v·∫•n
#embed_corpus = SentenceTransformer("intfloat/multilingual-e5-base")  # d√πng cho indexing n·ªôi dung

# 3Ô∏è‚É£ Sinh embedding model (Vi·ªát h√≥a ho·∫∑c ƒëa ng√¥n ng·ªØ)
embed_model = SentenceTransformer("intfloat/multilingual-e5-base")

def embed_text(text):
    return embed_model.encode(text).tolist()

# 4Ô∏è‚É£ Chu·∫©n b·ªã d·ªØ li·ªáu m·∫´u
courses = [
    {
        "course_id": "C001",
        "title": "Kh√≥a h·ªçc SEO n√¢ng cao",
        "author": "Nguy·ªÖn Minh",
        "category": "Marketing",
        "description": "Kh√≥a h·ªçc gi√∫p b·∫°n t·ªëi ∆∞u SEO website, nghi√™n c·ª©u t·ª´ kh√≥a v√† x√¢y d·ª±ng n·ªôi dung ch·∫•t l∆∞·ª£ng.",
        "url": "https://example.com/seo-nang-cao",
        "lessons": [
            {"lesson_id": "L001", "title": "Nghi√™n c·ª©u t·ª´ kh√≥a", "content": "C√°ch ph√¢n t√≠ch v√† ch·ªçn t·ª´ kh√≥a ph√π h·ª£p."},
            {"lesson_id": "L002", "title": "T·ªëi ∆∞u Onpage", "content": "K·ªπ thu·∫≠t t·ªëi ∆∞u ti√™u ƒë·ªÅ, meta v√† heading."},
            {"lesson_id": "L003", "title": "X√¢y d·ª±ng backlink", "content": "Ph∆∞∆°ng ph√°p t·∫°o li√™n k·∫øt ch·∫•t l∆∞·ª£ng cao."}
        ]
    },
    {
        "course_id": "C002",
        "title": "Kh√≥a h·ªçc L·∫≠p tr√¨nh Python c∆° b·∫£n",
        "author": "Tr·∫ßn Huy",
        "category": "L·∫≠p tr√¨nh",
        "description": "H·ªçc Python t·ª´ cƒÉn b·∫£n ƒë·∫øn n√¢ng cao, qua v√≠ d·ª• th·ª±c t·∫ø v√† b√†i t·∫≠p ·ª©ng d·ª•ng.",
        "url": "https://example.com/python-co-ban",
        "lessons": [
            {"lesson_id": "L004", "title": "Gi·ªõi thi·ªáu Python", "content": "L·ªãch s·ª≠ v√† ·ª©ng d·ª•ng th·ª±c t·∫ø c·ªßa Python."},
            {"lesson_id": "L005", "title": "Bi·∫øn v√† ki·ªÉu d·ªØ li·ªáu", "content": "C√°ch khai b√°o v√† s·ª≠ d·ª•ng bi·∫øn trong Python."}
        ]
    }
]


# 5Ô∏è‚É£ Chuy·ªÉn d·ªØ li·ªáu th√†nh c√°c b·∫£n ghi embedding
def prepare_records(courses):
    records = []
    for course in courses:
        # Kh√≥a h·ªçc
        course_text = f"Kh√≥a h·ªçc: {course['title']}. T√°c gi·∫£: {course['author']}. Danh m·ª•c: {course['category']}. N·ªôi dung: {course['description']}"
        records.append({
            "id": str(uuid.uuid4()),
            "embedding": embed_text(course_text),
            "type": "course",
            "course_id": course["course_id"],
            "course_title": course["title"],
            "lesson_id": "",
            "lesson_title": "",
            "author": course["author"],
            "category": course["category"],
            "content": course["description"],
            "url": course["url"]
        })

        # C√°c b√†i h·ªçc
        for lesson in course["lessons"]:
            lesson_text = f"B√†i h·ªçc: {lesson['title']}. Thu·ªôc kh√≥a h·ªçc: {course['title']}. T√°c gi·∫£: {course['author']}. N·ªôi dung: {lesson['content']}"
            records.append({
                "id": str(uuid.uuid4()),
                "embedding": embed_text(lesson_text),
                "type": "lesson",
                "course_id": course["course_id"],
                "course_title": course["title"],
                "lesson_id": lesson["lesson_id"],
                "lesson_title": lesson["title"],
                "author": course["author"],
                "category": course["category"],
                "content": lesson["content"],
                "url": course["url"]
            })
    return records


# 6Ô∏è‚É£ Insert v√†o Milvus
def insert_data(collection, records):
    data = [
        [r["id"] for r in records],
        [r["embedding"] for r in records],
        [r["type"] for r in records],
        [r["course_id"] for r in records],
        [r["course_title"] for r in records],
        [r["lesson_id"] for r in records],
        [r["lesson_title"] for r in records],
        [r["author"] for r in records],
        [r["category"] for r in records],
        [r["content"] for r in records],
        [r["url"] for r in records],
    ]
    collection.insert(data)
    collection.flush()
    print(f"‚úÖ ƒê√£ insert {len(records)} records v√†o Milvus")


# 7Ô∏è‚É£ T√¨m ki·∫øm RAG (semantic query)
def query_rag(collection, query, filter_expr=None, limit=5):
    q_emb = embed_text(query)
    results = collection.search(
        data=[q_emb],
        anns_field="embedding",
        param={"metric_type": "IP", "params": {"nprobe": 8}},
        limit=limit,
        expr=filter_expr,
        output_fields=["type", "course_title", "lesson_title", "author", "url", "content"]
    )
    print(f"\nüîç Query: {query}\n")
    for hit in results[0]:
        print(f"[{hit.entity.get('type').upper()}] {hit.entity.get('course_title')} ‚Üí {hit.entity.get('lesson_title')}")
        print(f"T√°c gi·∫£: {hit.entity.get('author')} | URL: {hit.entity.get('url')}")
        print(f"N·ªôi dung: {hit.entity.get('content')[:100]}...\n")

